{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\copte\\\\Desktop\\\\upbeatreact\\\\src\\\\Page4.js\";\nimport \"./Page4.css\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Hexagons extends React.Component {\n  componentDidMount() {\n    const canvas = this.canvas;\n    this.ctx = canvas.getContext(\"2d\");\n    this.imagesLoaded = {};\n    this.imagesToLoad = this.props.dataset.filter(data => data.type === \"image\");\n    this.setLayout();\n    this.resizeBind = this.setLayout.bind(this);\n    window.addEventListener(\"resize\", this.resizeBind);\n  }\n  getPropsBasedOnWidth(width) {\n    const defaultProps = {\n      width: this.props.side,\n      fontSize: this.props.fontSize,\n      borderWidth: this.props.borderWidth\n    };\n    if (!this._maxqueries) {\n      this._maxqueries = this.props.maxQueries.sort((a, b) => {\n        return a[0] - b[0];\n      });\n    }\n    if (!this._minqueries) {\n      this._minqueries = this.props.minQueries.sort((a, b) => {\n        return b[0] - a[0];\n      });\n    }\n    for (let k of this._maxqueries) {\n      if (k[0] >= width) {\n        return Object.assign(defaultProps, k[1]);\n      }\n    }\n    for (let k of this._minqueries) {\n      if (k[0] + 1 <= width) {\n        return Object.assign(defaultProps, k[1]);\n      }\n    }\n    return defaultProps;\n  }\n  setLayout() {\n    const canvas = this.canvas;\n    this.width = canvas.parentNode.clientWidth;\n    this.ratio = window.devicePixelRatio;\n    const props = this.getPropsBasedOnWidth(this.width);\n    const {\n      side,\n      height,\n      totWidth\n    } = this.getHexagonProps({\n      width: props.width\n    });\n    this.hexWidth = props.width;\n    this.side = side;\n    this.hexHeight = height;\n    this.hexTotW = totWidth;\n    const {\n      count,\n      scost,\n      margin\n    } = this.getLayoutProps();\n    this.height = scost.y * count.y + scost.yOddMove + margin;\n    console.log(this.getLayoutProps(), this.height, this.getHexagonProps({\n      width: this.hexWidth\n    }));\n    this.setCanvasSize({\n      canvas,\n      ratio: this.ratio,\n      width: this.width,\n      height: this.height\n    });\n    this.ctx.scale(this.ratio, this.ratio);\n    this.draw(this.ctx, props);\n  }\n  getHexagonProps(_ref) {\n    let {\n      width\n    } = _ref;\n    const rad = deg => deg * Math.PI / 180; // degs to radiants\n\n    const side = width * Math.sin(rad(30)),\n      height = width * Math.cos(rad(30)) * 2,\n      totWidth = width + side * 2;\n    return {\n      side,\n      height,\n      totWidth\n    };\n  }\n  setCanvasSize(_ref2) {\n    let {\n      canvas,\n      width,\n      height,\n      ratio\n    } = _ref2;\n    canvas.style.width = width + \"px\";\n    canvas.style.height = height + \"px\";\n    canvas.width = width * ratio;\n    canvas.height = height * ratio;\n  }\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.resizeBind);\n  }\n  getLayoutProps() {\n    const margin = this.props.margin;\n    const dataLength = this.props.dataset.length;\n    const hScost = this.hexWidth + this.side + margin;\n    const vScost = this.hexHeight + margin;\n    const centerX = (this.width - (margin + hScost * hCount)) / 2;\n    const hCountMar = this.props.centerX ? centerX : margin;\n    const hCount = Math.round((this.width - this.hexTotW) / hScost);\n    const countX = Math.min(Math.max(hCount, 1), dataLength);\n    const vCount = Math.ceil(this.props.dataset.length / countX);\n    return {\n      margin,\n      count: {\n        x: countX,\n        y: vCount\n      },\n      scost: {\n        x: hScost,\n        y: vScost,\n        yOddMove: this.hexHeight / 2 + margin / 2\n      },\n      centerX: (this.width - (countX * (this.hexWidth + this.side + margin) + this.side - margin)) / 2\n    };\n  }\n  draw(ctx, props) {\n    const canvas = this.canvas;\n    const ratio = this.ratio;\n    this.ctx.clearRect(0, 0, this.width, this.height);\n    const {\n      count,\n      scost,\n      margin,\n      centerX\n    } = this.getLayoutProps();\n    const l = this.props.dataset.length;\n    for (let j = 0, k = 0; j < count.y && k < l; j += 1) {\n      for (let i = 0; i < count.x && k < l; i += 1, k += 1) {\n        this.drawHex(ctx, props, i * scost.x + (this.props.centerX ? centerX : margin), j * scost.y + (i % 2 ? scost.yOddMove : 0) + margin, j * count.y + i, this.props.dataset[k]);\n      }\n    }\n  }\n  drawHexPath(_ref3) {\n    let {\n      ctx,\n      x,\n      y,\n      width,\n      side,\n      height\n    } = _ref3;\n    ctx.beginPath();\n    ctx.moveTo(x + side, y);\n    ctx.lineTo(x + width + side, y);\n    ctx.lineTo(x + width + side * 2, y + height / 2);\n    ctx.lineTo(x + width + side, y + height);\n    ctx.lineTo(x + side, y + height);\n    ctx.lineTo(x, y + height / 2);\n    ctx.lineTo(x + side, y);\n    ctx.closePath();\n  }\n  drawText(_ref4) {\n    let {\n      ctx,\n      x,\n      y,\n      text\n    } = _ref4;\n    ctx.lineWidth = 0;\n    ctx.fillStyle = this.props.fontColor;\n    ctx.font = `${this.props.fontSize}px ${this.props.fontFamily}`;\n    ctx.textAlign = \"center\";\n    ctx.textBaseline = \"middle\";\n    ctx.fillText(text, x, y);\n  }\n  drawImage(_ref5) {\n    let {\n      ctx,\n      img,\n      pos,\n      size,\n      ratio\n    } = _ref5;\n    const ratio_w = size.width / img.width;\n    const ratio_h = size.height / img.height;\n    let scale = Math.max(ratio_w, ratio_h);\n    if (scale * img.width < size.width) scale = ratio_w;\n    const imgSize = {\n      width: img.width * scale,\n      height: img.height * scale\n    };\n    pos.x -= (imgSize.width - size.width) / 2;\n    pos.y -= (imgSize.height - size.height) / 2;\n    imgSize.height += 1 * ratio;\n    ctx.drawImage(img, pos.x, pos.y, imgSize.width, imgSize.height);\n  }\n  drawHexContent(_ref6) {\n    let {\n      ctx,\n      x,\n      y,\n      type,\n      img = null,\n      fill = null,\n      text = null\n    } = _ref6;\n    let hexWidth = this.hexWidth,\n      hexHeight = this.hexHeight,\n      hexSide = this.side;\n    ctx.save();\n    this.drawHexPath({\n      x,\n      y,\n      ctx,\n      side: hexSide,\n      width: hexWidth,\n      height: hexHeight\n    });\n    if (type === \"fill\") {\n      ctx.fillStyle = fill;\n      ctx.fill();\n    } else if (type === \"image\") {\n      ctx.clip();\n      this.drawImage({\n        img,\n        ctx,\n        size: {\n          width: this.hexTotW,\n          height: this.hexHeight\n        },\n        pos: {\n          x,\n          y\n        },\n        ratio: this.ratio\n      });\n    }\n    if (this.props.border) {\n      ctx.lineWidth = this.props.borderWidth;\n      ctx.strokeStyle = this.props.borderColor;\n      ctx.stroke();\n    }\n    if (this.props.overlay) {\n      ctx.fillStyle = this.props.overlayColor;\n      ctx.fill();\n    }\n    if (typeof text === \"string\") {\n      this.drawText({\n        ctx,\n        text,\n        x: x + this.hexTotW / 2,\n        y: y + this.hexHeight / 2\n      });\n    }\n    ctx.restore();\n  }\n  checkOnLoad() {\n    if (this.loaded) return;\n    if (Object.keys(this.imagesLoaded).length === this.imagesToLoad.length) {\n      if (typeof this.props.onLoad === \"function\") {\n        this.loaded = true;\n        this.props.onLoad();\n      }\n    }\n  }\n  getImage(src) {\n    if (typeof this.imagesLoaded[src] !== \"undefined\") return Promise.resolve(this.imagesLoaded[src]);\n    return new Promise(res => {\n      const img = new Image();\n      img.src = src;\n      img.crossOrigin = \"Anonymous\";\n      img.onload = () => {\n        this.imagesLoaded[src] = img;\n        this.checkOnLoad();\n        res(img);\n      };\n    });\n  }\n  async drawHex(ctx, props) {\n    let x = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let y = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    let i = arguments.length > 4 ? arguments[4] : undefined;\n    let data = arguments.length > 5 ? arguments[5] : undefined;\n    const content = {\n      ctx,\n      x,\n      y\n    };\n    content.fill = data.fill;\n    content.type = data.type;\n    content.text = data.text;\n    if (data.type === \"image\") {\n      content.img = await this.getImage(data.src);\n    }\n    this.drawHexContent(content);\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"hexagons-component\",\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: el => this.canvas = el,\n        style: {\n          position: \"relative\",\n          top: 0,\n          left: 0,\n          cursor: \"pointer\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 7\n    }, this);\n  }\n}\nHexagons.defaultProps = {\n  dataset: [{\n    type: \"image\",\n    src: \"https://picsum.photos/200/300\"\n  }, {\n    type: \"image\",\n    src: \"https://picsum.photos/300/200\"\n  }, {\n    type: \"image\",\n    src: \"https://picsum.photos/300/300\"\n  }, {\n    type: \"image\",\n    src: \"https://picsum.photos/400/200\"\n  }, {\n    type: \"image\",\n    src: \"https://picsum.photos/512/500\"\n  }, {\n    type: \"fill\",\n    fill: \"rgba(20, 128, 205, 1.0)\",\n    text: \"Hex\"\n  }, {\n    type: \"image\",\n    src: \"https://picsum.photos/512/800\"\n  }, {\n    type: \"image\",\n    src: \"https://picsum.photos/500/600\"\n  }, {\n    type: \"image\",\n    src: \"https://picsum.photos/400/500\"\n  }, {\n    type: \"fill\",\n    fill: \"rgba(20, 128, 205, 1.0)\",\n    text: \"text\"\n  }],\n  onLoad: null,\n  // Single side width in px\n  side: 80,\n  margin: 10,\n  centerX: true,\n  border: false,\n  borderWidth: 0,\n  borderColor: \"#f0f\",\n  fontFamily: \"Roboto\",\n  fontColor: \"#ffffff\",\n  fontSize: 30,\n  overlay: false,\n  overlayColor: \"rgba(235, 128, 5,0.5)\",\n  // Responsive\n\n  // max-width\n  maxQueries: [[1024, {\n    width: 80,\n    borderWidth: 1,\n    fontSize: 18\n  }], [640, {\n    width: 50,\n    borderWidth: 1,\n    fontSize: 14\n  }]],\n  // min-width\n  minQueries: [[1024, {\n    width: 100,\n    borderWidth: 1,\n    fontSize: 24\n  }], [1280, {\n    width: 200,\n    borderWidth: 1,\n    fontSize: 26\n  }]]\n};\nfunction Page4() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"hexagons\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 375,\n    columnNumber: 10\n  }, this);\n}\n_c = Page4;\nexport default Page4;\nvar _c;\n$RefreshReg$(_c, \"Page4\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Hexagons","Component","componentDidMount","canvas","ctx","getContext","imagesLoaded","imagesToLoad","props","dataset","filter","data","type","setLayout","resizeBind","bind","window","addEventListener","getPropsBasedOnWidth","width","defaultProps","side","fontSize","borderWidth","_maxqueries","maxQueries","sort","a","b","_minqueries","minQueries","k","Object","assign","parentNode","clientWidth","ratio","devicePixelRatio","height","totWidth","getHexagonProps","hexWidth","hexHeight","hexTotW","count","scost","margin","getLayoutProps","y","yOddMove","console","log","setCanvasSize","scale","draw","_ref","rad","deg","Math","PI","sin","cos","_ref2","style","componentWillUnmount","removeEventListener","dataLength","length","hScost","vScost","centerX","hCount","hCountMar","round","countX","min","max","vCount","ceil","x","clearRect","l","j","i","drawHex","drawHexPath","_ref3","beginPath","moveTo","lineTo","closePath","drawText","_ref4","text","lineWidth","fillStyle","fontColor","font","fontFamily","textAlign","textBaseline","fillText","drawImage","_ref5","img","pos","size","ratio_w","ratio_h","imgSize","drawHexContent","_ref6","fill","hexSide","save","clip","border","strokeStyle","borderColor","stroke","overlay","overlayColor","restore","checkOnLoad","loaded","keys","onLoad","getImage","src","Promise","resolve","res","Image","crossOrigin","onload","arguments","undefined","content","render","className","children","ref","el","position","top","left","cursor","fileName","_jsxFileName","lineNumber","columnNumber","Page4","class","_c","$RefreshReg$"],"sources":["C:/Users/copte/Desktop/upbeatreact/src/Page4.js"],"sourcesContent":["import \"./Page4.css\";\r\nimport React from \"react\";\r\nclass Hexagons extends React.Component {\r\n  componentDidMount() {\r\n    const canvas = this.canvas;\r\n\r\n    this.ctx = canvas.getContext(\"2d\");\r\n    this.imagesLoaded = {};\r\n    this.imagesToLoad = this.props.dataset.filter(\r\n      (data) => data.type === \"image\"\r\n    );\r\n    this.setLayout();\r\n\r\n    this.resizeBind = this.setLayout.bind(this);\r\n    window.addEventListener(\"resize\", this.resizeBind);\r\n  }\r\n\r\n  getPropsBasedOnWidth(width) {\r\n    const defaultProps = {\r\n      width: this.props.side,\r\n      fontSize: this.props.fontSize,\r\n      borderWidth: this.props.borderWidth,\r\n    };\r\n\r\n    if (!this._maxqueries) {\r\n      this._maxqueries = this.props.maxQueries.sort((a, b) => {\r\n        return a[0] - b[0];\r\n      });\r\n    }\r\n\r\n    if (!this._minqueries) {\r\n      this._minqueries = this.props.minQueries.sort((a, b) => {\r\n        return b[0] - a[0];\r\n      });\r\n    }\r\n\r\n    for (let k of this._maxqueries) {\r\n      if (k[0] >= width) {\r\n        return Object.assign(defaultProps, k[1]);\r\n      }\r\n    }\r\n\r\n    for (let k of this._minqueries) {\r\n      if (k[0] + 1 <= width) {\r\n        return Object.assign(defaultProps, k[1]);\r\n      }\r\n    }\r\n\r\n    return defaultProps;\r\n  }\r\n\r\n  setLayout() {\r\n    const canvas = this.canvas;\r\n\r\n    this.width = canvas.parentNode.clientWidth;\r\n    this.ratio = window.devicePixelRatio;\r\n\r\n    const props = this.getPropsBasedOnWidth(this.width);\r\n\r\n    const { side, height, totWidth } = this.getHexagonProps({\r\n      width: props.width,\r\n    });\r\n\r\n    this.hexWidth = props.width;\r\n    this.side = side;\r\n    this.hexHeight = height;\r\n    this.hexTotW = totWidth;\r\n\r\n    const { count, scost, margin } = this.getLayoutProps();\r\n\r\n    this.height = scost.y * count.y + scost.yOddMove + margin;\r\n\r\n    console.log(\r\n      this.getLayoutProps(),\r\n      this.height,\r\n      this.getHexagonProps({ width: this.hexWidth })\r\n    );\r\n\r\n    this.setCanvasSize({\r\n      canvas,\r\n      ratio: this.ratio,\r\n      width: this.width,\r\n      height: this.height,\r\n    });\r\n\r\n    this.ctx.scale(this.ratio, this.ratio);\r\n    this.draw(this.ctx, props);\r\n  }\r\n\r\n  getHexagonProps({ width }) {\r\n    const rad = (deg) => (deg * Math.PI) / 180; // degs to radiants\r\n\r\n    const side = width * Math.sin(rad(30)),\r\n      height = width * Math.cos(rad(30)) * 2,\r\n      totWidth = width + side * 2;\r\n\r\n    return { side, height, totWidth };\r\n  }\r\n\r\n  setCanvasSize({ canvas, width, height, ratio }) {\r\n    canvas.style.width = width + \"px\";\r\n    canvas.style.height = height + \"px\";\r\n    canvas.width = width * ratio;\r\n    canvas.height = height * ratio;\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"resize\", this.resizeBind);\r\n  }\r\n\r\n  getLayoutProps() {\r\n    const margin = this.props.margin;\r\n\r\n    const dataLength = this.props.dataset.length;\r\n\r\n    const hScost = this.hexWidth + this.side + margin;\r\n    const vScost = this.hexHeight + margin;\r\n\r\n    const centerX = (this.width - (margin + hScost * hCount)) / 2;\r\n\r\n    const hCountMar = this.props.centerX ? centerX : margin;\r\n\r\n    const hCount = Math.round((this.width - this.hexTotW) / hScost);\r\n\r\n    const countX = Math.min(Math.max(hCount, 1), dataLength);\r\n\r\n    const vCount = Math.ceil(this.props.dataset.length / countX);\r\n\r\n    return {\r\n      margin,\r\n      count: {\r\n        x: countX,\r\n        y: vCount,\r\n      },\r\n      scost: {\r\n        x: hScost,\r\n        y: vScost,\r\n        yOddMove: this.hexHeight / 2 + margin / 2,\r\n      },\r\n      centerX:\r\n        (this.width -\r\n          (countX * (this.hexWidth + this.side + margin) +\r\n            this.side -\r\n            margin)) /\r\n        2,\r\n    };\r\n  }\r\n\r\n  draw(ctx, props) {\r\n    const canvas = this.canvas;\r\n    const ratio = this.ratio;\r\n\r\n    this.ctx.clearRect(0, 0, this.width, this.height);\r\n\r\n    const { count, scost, margin, centerX } = this.getLayoutProps();\r\n\r\n    const l = this.props.dataset.length;\r\n\r\n    for (let j = 0, k = 0; j < count.y && k < l; j += 1) {\r\n      for (let i = 0; i < count.x && k < l; i += 1, k += 1) {\r\n        this.drawHex(\r\n          ctx,\r\n          props,\r\n          i * scost.x + (this.props.centerX ? centerX : margin),\r\n          j * scost.y + (i % 2 ? scost.yOddMove : 0) + margin,\r\n          j * count.y + i,\r\n          this.props.dataset[k]\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  drawHexPath({ ctx, x, y, width, side, height }) {\r\n    ctx.beginPath();\r\n    ctx.moveTo(x + side, y);\r\n    ctx.lineTo(x + width + side, y);\r\n    ctx.lineTo(x + width + side * 2, y + height / 2);\r\n    ctx.lineTo(x + width + side, y + height);\r\n    ctx.lineTo(x + side, y + height);\r\n    ctx.lineTo(x, y + height / 2);\r\n    ctx.lineTo(x + side, y);\r\n    ctx.closePath();\r\n  }\r\n\r\n  drawText({ ctx, x, y, text }) {\r\n    ctx.lineWidth = 0;\r\n    ctx.fillStyle = this.props.fontColor;\r\n    ctx.font = `${this.props.fontSize}px ${this.props.fontFamily}`;\r\n    ctx.textAlign = \"center\";\r\n    ctx.textBaseline = \"middle\";\r\n    ctx.fillText(text, x, y);\r\n  }\r\n\r\n  drawImage({ ctx, img, pos, size, ratio }) {\r\n    const ratio_w = size.width / img.width;\r\n    const ratio_h = size.height / img.height;\r\n\r\n    let scale = Math.max(ratio_w, ratio_h);\r\n\r\n    if (scale * img.width < size.width) scale = ratio_w;\r\n\r\n    const imgSize = {\r\n      width: img.width * scale,\r\n      height: img.height * scale,\r\n    };\r\n\r\n    pos.x -= (imgSize.width - size.width) / 2;\r\n    pos.y -= (imgSize.height - size.height) / 2;\r\n\r\n    imgSize.height += 1 * ratio;\r\n\r\n    ctx.drawImage(img, pos.x, pos.y, imgSize.width, imgSize.height);\r\n  }\r\n\r\n  drawHexContent({ ctx, x, y, type, img = null, fill = null, text = null }) {\r\n    let hexWidth = this.hexWidth,\r\n      hexHeight = this.hexHeight,\r\n      hexSide = this.side;\r\n\r\n    ctx.save();\r\n\r\n    this.drawHexPath({\r\n      x,\r\n      y,\r\n      ctx,\r\n      side: hexSide,\r\n      width: hexWidth,\r\n      height: hexHeight,\r\n    });\r\n\r\n    if (type === \"fill\") {\r\n      ctx.fillStyle = fill;\r\n      ctx.fill();\r\n    } else if (type === \"image\") {\r\n      ctx.clip();\r\n      this.drawImage({\r\n        img,\r\n        ctx,\r\n        size: { width: this.hexTotW, height: this.hexHeight },\r\n        pos: { x, y },\r\n        ratio: this.ratio,\r\n      });\r\n    }\r\n\r\n    if (this.props.border) {\r\n      ctx.lineWidth = this.props.borderWidth;\r\n      ctx.strokeStyle = this.props.borderColor;\r\n      ctx.stroke();\r\n    }\r\n\r\n    if (this.props.overlay) {\r\n      ctx.fillStyle = this.props.overlayColor;\r\n      ctx.fill();\r\n    }\r\n\r\n    if (typeof text === \"string\") {\r\n      this.drawText({\r\n        ctx,\r\n        text,\r\n        x: x + this.hexTotW / 2,\r\n        y: y + this.hexHeight / 2,\r\n      });\r\n    }\r\n\r\n    ctx.restore();\r\n  }\r\n\r\n  checkOnLoad() {\r\n    if (this.loaded) return;\r\n\r\n    if (Object.keys(this.imagesLoaded).length === this.imagesToLoad.length) {\r\n      if (typeof this.props.onLoad === \"function\") {\r\n        this.loaded = true;\r\n        this.props.onLoad();\r\n      }\r\n    }\r\n  }\r\n\r\n  getImage(src) {\r\n    if (typeof this.imagesLoaded[src] !== \"undefined\")\r\n      return Promise.resolve(this.imagesLoaded[src]);\r\n\r\n    return new Promise((res) => {\r\n      const img = new Image();\r\n      img.src = src;\r\n      img.crossOrigin = \"Anonymous\";\r\n      img.onload = () => {\r\n        this.imagesLoaded[src] = img;\r\n        this.checkOnLoad();\r\n        res(img);\r\n      };\r\n    });\r\n  }\r\n\r\n  async drawHex(ctx, props, x = 0, y = 0, i, data) {\r\n    const content = { ctx, x, y };\r\n\r\n    content.fill = data.fill;\r\n    content.type = data.type;\r\n    content.text = data.text;\r\n\r\n    if (data.type === \"image\") {\r\n      content.img = await this.getImage(data.src);\r\n    }\r\n\r\n    this.drawHexContent(content);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"hexagons-component\">\r\n        <canvas\r\n          ref={(el) => (this.canvas = el)}\r\n          style={{\r\n            position: \"relative\",\r\n            top: 0,\r\n            left: 0,\r\n            cursor: \"pointer\",\r\n          }}\r\n        ></canvas>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nHexagons.defaultProps = {\r\n  dataset: [\r\n    { type: \"image\", src: \"https://picsum.photos/200/300\" },\r\n    { type: \"image\", src: \"https://picsum.photos/300/200\" },\r\n    { type: \"image\", src: \"https://picsum.photos/300/300\" },\r\n    { type: \"image\", src: \"https://picsum.photos/400/200\" },\r\n    { type: \"image\", src: \"https://picsum.photos/512/500\" },\r\n    { type: \"fill\", fill: \"rgba(20, 128, 205, 1.0)\", text: \"Hex\" },\r\n    { type: \"image\", src: \"https://picsum.photos/512/800\" },\r\n    { type: \"image\", src: \"https://picsum.photos/500/600\" },\r\n    { type: \"image\", src: \"https://picsum.photos/400/500\" },\r\n    { type: \"fill\", fill: \"rgba(20, 128, 205, 1.0)\", text: \"text\" },\r\n  ],\r\n\r\n  onLoad: null,\r\n\r\n  // Single side width in px\r\n  side: 80,\r\n\r\n  margin: 10,\r\n  centerX: true,\r\n\r\n  border: false,\r\n  borderWidth: 0,\r\n  borderColor: \"#f0f\",\r\n\r\n  fontFamily: \"Roboto\",\r\n  fontColor: \"#ffffff\",\r\n  fontSize: 30,\r\n\r\n  overlay: false,\r\n  overlayColor: \"rgba(235, 128, 5,0.5)\",\r\n\r\n  // Responsive\r\n\r\n  // max-width\r\n  maxQueries: [\r\n    [1024, { width: 80, borderWidth: 1, fontSize: 18 }],\r\n    [640, { width: 50, borderWidth: 1, fontSize: 14 }],\r\n  ],\r\n\r\n  // min-width\r\n  minQueries: [\r\n    [1024, { width: 100, borderWidth: 1, fontSize: 24 }],\r\n    [1280, { width: 200, borderWidth: 1, fontSize: 26 }],\r\n  ],\r\n};\r\n\r\nfunction Page4() {\r\n  return <div class=\"hexagons\"></div>;\r\n}\r\nexport default Page4;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}