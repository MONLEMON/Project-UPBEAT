{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\copte\\\\Desktop\\\\upbeatreact\\\\src\\\\hexagongrid.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport isFunction from \"lodash/isFunction\";\nimport isEmpty from \"lodash/isEmpty\";\nimport times from \"lodash/times\";\nimport Hexagon from \"react-hexagon\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getGridDimensions = (gridWidth, gridHeight, N) => {\n  const a = 5 * gridHeight / (gridWidth * Math.sqrt(2));\n  const b = gridHeight / (2 * gridWidth) - 2;\n  const columns = Math.ceil((-b + Math.sqrt(b * b + 4 * N * a)) / (2 * a));\n  const hexSize = Math.floor(gridWidth / (3 * columns + 0.5));\n  const rows = Math.ceil(N / columns);\n  return {\n    columns,\n    hexSize,\n    hexWidth: hexSize * 2,\n    hexHeight: Math.ceil(hexSize * Math.sqrt(3)),\n    rows\n  };\n};\nconst tryInvoke = function (func) {\n  let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  let defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  return isFunction(func) ? func(...params) : defaultValue;\n};\nconst HexagonGrid = props => {\n  _s();\n  const {\n    hexagons,\n    gridHeight,\n    gridWidth,\n    renderHexagonContent,\n    hexProps,\n    x,\n    y\n  } = props;\n  const [state, setState] = useState({\n    columns: 1,\n    hexSize: 1,\n    hexWidth: 1,\n    hexHeight: 1,\n    rows: 0\n  });\n  useEffect(() => {\n    if (!isEmpty(hexagons) && gridWidth > 0 && gridHeight > 0) {\n      setState(getGridDimensions(gridWidth, gridHeight, hexagons.length));\n    }\n  }, [hexagons, gridWidth, gridHeight]);\n  const getHexDimensions = (row, col) => {\n    const dimensions = {\n      width: `${state.hexWidth}px`,\n      height: `${state.hexHeight}px`,\n      x: col * state.hexSize * 3\n    };\n    if (row % 2 === 1) {\n      dimensions.x += state.hexSize * (3 / 2);\n    }\n    return dimensions;\n  };\n  const getRowDimensions = row => {\n    const dimensions = {\n      y: `${row * (state.hexSize * (Math.sqrt(3) / 2))}px`,\n      height: `${state.hexHeight}px`,\n      width: gridWidth\n    };\n    if (row % 2 === 0) {\n      dimensions.marginLeft = `${state.hexSize / 2 * 3}px`;\n    }\n    return dimensions;\n  };\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    width: gridWidth,\n    height: gridHeight,\n    x: x,\n    y: y,\n    children: times(state.rows, row => {\n      const remaining = hexagons.length - row * state.columns;\n      const columns = remaining < state.columns ? remaining : state.columns;\n      const rowDim = getRowDimensions(row);\n      return /*#__PURE__*/_jsxDEV(\"svg\", {\n        width: rowDim.width,\n        height: rowDim.height,\n        y: rowDim.y,\n        children: times(columns, col => {\n          const iHexagon = row * state.columns + col;\n          const hexagon = hexagons[iHexagon];\n          const hexDim = getHexDimensions(row, col);\n          const _hexProps = tryInvoke(hexProps, [hexagon], hexProps);\n          return /*#__PURE__*/_jsxDEV(\"svg\", {\n            height: hexDim.height,\n            width: hexDim.width,\n            x: `${hexDim.x}px`,\n            children: /*#__PURE__*/_jsxDEV(Hexagon, {\n              ..._hexProps,\n              flatTop: true,\n              children: tryInvoke(renderHexagonContent, [hexagon], /*#__PURE__*/_jsxDEV(\"tspan\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 105,\n                columnNumber: 65\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 19\n            }, this)\n          }, iHexagon, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 17\n          }, this);\n        })\n      }, row, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n_s(HexagonGrid, \"2VjMJlNkWImtban+F63zaf83MOg=\");\n_c = HexagonGrid;\nHexagonGrid.propTypes = {\n  gridWidth: PropTypes.number.isRequired,\n  gridHeight: PropTypes.number.isRequired,\n  hexagons: PropTypes.arrayOf(PropTypes.any).isRequired,\n  hexProps: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n  renderHexagonContent: PropTypes.func,\n  x: PropTypes.number,\n  y: PropTypes.number\n};\nHexagonGrid.defaultProps = {\n  hexProps: {},\n  renderHexagonContent: null,\n  x: 0,\n  y: 0\n};\nexport default HexagonGrid;\nvar _c;\n$RefreshReg$(_c, \"HexagonGrid\");","map":{"version":3,"names":["React","useState","useEffect","PropTypes","isFunction","isEmpty","times","Hexagon","jsxDEV","_jsxDEV","getGridDimensions","gridWidth","gridHeight","N","a","Math","sqrt","b","columns","ceil","hexSize","floor","rows","hexWidth","hexHeight","tryInvoke","func","params","arguments","length","undefined","defaultValue","HexagonGrid","props","_s","hexagons","renderHexagonContent","hexProps","x","y","state","setState","getHexDimensions","row","col","dimensions","width","height","getRowDimensions","marginLeft","children","remaining","rowDim","iHexagon","hexagon","hexDim","_hexProps","flatTop","fileName","_jsxFileName","lineNumber","columnNumber","_c","propTypes","number","isRequired","arrayOf","any","oneOfType","object","defaultProps","$RefreshReg$"],"sources":["C:/Users/copte/Desktop/upbeatreact/src/hexagongrid.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport isFunction from \"lodash/isFunction\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport times from \"lodash/times\";\r\nimport Hexagon from \"react-hexagon\";\r\n\r\nconst getGridDimensions = (gridWidth, gridHeight, N) => {\r\n  const a = (5 * gridHeight) / (gridWidth * Math.sqrt(2));\r\n  const b = gridHeight / (2 * gridWidth) - 2;\r\n\r\n  const columns = Math.ceil((-b + Math.sqrt(b * b + 4 * N * a)) / (2 * a));\r\n\r\n  const hexSize = Math.floor(gridWidth / (3 * columns + 0.5));\r\n  const rows = Math.ceil(N / columns);\r\n\r\n  return {\r\n    columns,\r\n    hexSize,\r\n    hexWidth: hexSize * 2,\r\n    hexHeight: Math.ceil(hexSize * Math.sqrt(3)),\r\n    rows,\r\n  };\r\n};\r\n\r\nconst tryInvoke = (func, params = [], defaultValue = null) => {\r\n  return isFunction(func) ? func(...params) : defaultValue;\r\n};\r\n\r\nconst HexagonGrid = (props) => {\r\n  const {\r\n    hexagons,\r\n    gridHeight,\r\n    gridWidth,\r\n    renderHexagonContent,\r\n    hexProps,\r\n    x,\r\n    y,\r\n  } = props;\r\n\r\n  const [state, setState] = useState({\r\n    columns: 1,\r\n    hexSize: 1,\r\n    hexWidth: 1,\r\n    hexHeight: 1,\r\n    rows: 0,\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (!isEmpty(hexagons) && gridWidth > 0 && gridHeight > 0) {\r\n      setState(getGridDimensions(gridWidth, gridHeight, hexagons.length));\r\n    }\r\n  }, [hexagons, gridWidth, gridHeight]);\r\n\r\n  const getHexDimensions = (row, col) => {\r\n    const dimensions = {\r\n      width: `${state.hexWidth}px`,\r\n      height: `${state.hexHeight}px`,\r\n      x: col * state.hexSize * 3,\r\n    };\r\n    if (row % 2 === 1) {\r\n      dimensions.x += state.hexSize * (3 / 2);\r\n    }\r\n    return dimensions;\r\n  };\r\n\r\n  const getRowDimensions = (row) => {\r\n    const dimensions = {\r\n      y: `${row * (state.hexSize * (Math.sqrt(3) / 2))}px`,\r\n      height: `${state.hexHeight}px`,\r\n      width: gridWidth,\r\n    };\r\n    if (row % 2 === 0) {\r\n      dimensions.marginLeft = `${(state.hexSize / 2) * 3}px`;\r\n    }\r\n    return dimensions;\r\n  };\r\n\r\n  return (\r\n    <svg width={gridWidth} height={gridHeight} x={x} y={y}>\r\n      {times(state.rows, (row) => {\r\n        const remaining = hexagons.length - row * state.columns;\r\n        const columns = remaining < state.columns ? remaining : state.columns;\r\n        const rowDim = getRowDimensions(row);\r\n        return (\r\n          <svg\r\n            key={row}\r\n            width={rowDim.width}\r\n            height={rowDim.height}\r\n            y={rowDim.y}\r\n          >\r\n            {times(columns, (col) => {\r\n              const iHexagon = row * state.columns + col;\r\n              const hexagon = hexagons[iHexagon];\r\n              const hexDim = getHexDimensions(row, col);\r\n              const _hexProps = tryInvoke(hexProps, [hexagon], hexProps);\r\n              return (\r\n                <svg\r\n                  key={iHexagon}\r\n                  height={hexDim.height}\r\n                  width={hexDim.width}\r\n                  x={`${hexDim.x}px`}\r\n                >\r\n                  <Hexagon {..._hexProps} flatTop>\r\n                    {tryInvoke(renderHexagonContent, [hexagon], <tspan />)}\r\n                  </Hexagon>\r\n                </svg>\r\n              );\r\n            })}\r\n          </svg>\r\n        );\r\n      })}\r\n    </svg>\r\n  );\r\n};\r\n\r\nHexagonGrid.propTypes = {\r\n  gridWidth: PropTypes.number.isRequired,\r\n  gridHeight: PropTypes.number.isRequired,\r\n  hexagons: PropTypes.arrayOf(PropTypes.any).isRequired,\r\n  hexProps: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\r\n  renderHexagonContent: PropTypes.func,\r\n  x: PropTypes.number,\r\n  y: PropTypes.number,\r\n};\r\n\r\nHexagonGrid.defaultProps = {\r\n  hexProps: {},\r\n  renderHexagonContent: null,\r\n  x: 0,\r\n  y: 0,\r\n};\r\n\r\nexport default HexagonGrid;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}