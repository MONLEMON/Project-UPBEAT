{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\copte\\\\Desktop\\\\upbeatreact\\\\src\\\\HexagonGrid.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction HexagonGrid() {\n  _s();\n  const [hexSize, setHexSize] = useState(50);\n  const [numHexagons, setNumHexagons] = useState(10);\n  function generateHexagonPath(x, y, size) {\n    const height = Math.sqrt(3) * size;\n    const width = 2 * size;\n    const halfHeight = height / 2;\n    const halfWidth = width / 2;\n    return `M ${x} ${y + halfHeight}\n            l ${halfWidth} ${-halfHeight}\n            l ${halfWidth} ${halfHeight}\n            l ${-halfWidth} ${halfHeight}\n            l ${-halfWidth} ${-halfHeight}\n            l ${halfWidth} ${-halfHeight}\n            z`;\n  }\n  function generateHexagons() {\n    const hexagons = [];\n    for (let i = 0; i < numHexagons; i++) {\n      for (let j = 0; j < numHexagons; j++) {\n        const x = j * hexSize * 1.5;\n        const y = i * hexSize * Math.sqrt(3) + j % 2 * hexSize * Math.sqrt(3) / 2;\n        const hexPath = generateHexagonPath(x, y, hexSize);\n        hexagons.push( /*#__PURE__*/_jsxDEV(\"path\", {\n          className: \"hexagon\",\n          d: hexPath\n        }, `${i}-${j}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, this));\n      }\n    }\n    return hexagons;\n  }\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    viewBox: `0 0 ${numHexagons * hexSize * 1.5} ${numHexagons * hexSize * Math.sqrt(3)}`,\n    children: generateHexagons()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n_s(HexagonGrid, \"fJ5ahc0HAgmfwi2/s2AGaYjl3ag=\");\n_c = HexagonGrid;\nexport default HexagonGrid;\nvar _c;\n$RefreshReg$(_c, \"HexagonGrid\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","HexagonGrid","_s","hexSize","setHexSize","numHexagons","setNumHexagons","generateHexagonPath","x","y","size","height","Math","sqrt","width","halfHeight","halfWidth","generateHexagons","hexagons","i","j","hexPath","push","className","d","fileName","_jsxFileName","lineNumber","columnNumber","viewBox","children","_c","$RefreshReg$"],"sources":["C:/Users/copte/Desktop/upbeatreact/src/HexagonGrid.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction HexagonGrid() {\r\n  const [hexSize, setHexSize] = useState(50);\r\n  const [numHexagons, setNumHexagons] = useState(10);\r\n\r\n  function generateHexagonPath(x, y, size) {\r\n    const height = Math.sqrt(3) * size;\r\n    const width = 2 * size;\r\n    const halfHeight = height / 2;\r\n    const halfWidth = width / 2;\r\n    return `M ${x} ${y + halfHeight}\r\n            l ${halfWidth} ${-halfHeight}\r\n            l ${halfWidth} ${halfHeight}\r\n            l ${-halfWidth} ${halfHeight}\r\n            l ${-halfWidth} ${-halfHeight}\r\n            l ${halfWidth} ${-halfHeight}\r\n            z`;\r\n  }\r\n\r\n  function generateHexagons() {\r\n    const hexagons = [];\r\n    for (let i = 0; i < numHexagons; i++) {\r\n      for (let j = 0; j < numHexagons; j++) {\r\n        const x = j * hexSize * 1.5;\r\n        const y =\r\n          i * hexSize * Math.sqrt(3) + ((j % 2) * hexSize * Math.sqrt(3)) / 2;\r\n        const hexPath = generateHexagonPath(x, y, hexSize);\r\n        hexagons.push(\r\n          <path key={`${i}-${j}`} className=\"hexagon\" d={hexPath} />\r\n        );\r\n      }\r\n    }\r\n    return hexagons;\r\n  }\r\n\r\n  return (\r\n    <svg\r\n      viewBox={`0 0 ${numHexagons * hexSize * 1.5} ${\r\n        numHexagons * hexSize * Math.sqrt(3)\r\n      }`}\r\n    >\r\n      {generateHexagons()}\r\n    </svg>\r\n  );\r\n}\r\n\r\nexport default HexagonGrid;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACrB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACO,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAElD,SAASS,mBAAmBA,CAACC,CAAC,EAAEC,CAAC,EAAEC,IAAI,EAAE;IACvC,MAAMC,MAAM,GAAGC,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC,GAAGH,IAAI;IAClC,MAAMI,KAAK,GAAG,CAAC,GAAGJ,IAAI;IACtB,MAAMK,UAAU,GAAGJ,MAAM,GAAG,CAAC;IAC7B,MAAMK,SAAS,GAAGF,KAAK,GAAG,CAAC;IAC3B,OAAQ,KAAIN,CAAE,IAAGC,CAAC,GAAGM,UAAW;AACpC,gBAAgBC,SAAU,IAAG,CAACD,UAAW;AACzC,gBAAgBC,SAAU,IAAGD,UAAW;AACxC,gBAAgB,CAACC,SAAU,IAAGD,UAAW;AACzC,gBAAgB,CAACC,SAAU,IAAG,CAACD,UAAW;AAC1C,gBAAgBC,SAAU,IAAG,CAACD,UAAW;AACzC,cAAc;EACZ;EAEA,SAASE,gBAAgBA,CAAA,EAAG;IAC1B,MAAMC,QAAQ,GAAG,EAAE;IACnB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGd,WAAW,EAAEc,CAAC,EAAE,EAAE;MACpC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGf,WAAW,EAAEe,CAAC,EAAE,EAAE;QACpC,MAAMZ,CAAC,GAAGY,CAAC,GAAGjB,OAAO,GAAG,GAAG;QAC3B,MAAMM,CAAC,GACLU,CAAC,GAAGhB,OAAO,GAAGS,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC,GAAKO,CAAC,GAAG,CAAC,GAAIjB,OAAO,GAAGS,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC,GAAI,CAAC;QACrE,MAAMQ,OAAO,GAAGd,mBAAmB,CAACC,CAAC,EAAEC,CAAC,EAAEN,OAAO,CAAC;QAClDe,QAAQ,CAACI,IAAI,eACXtB,OAAA;UAAwBuB,SAAS,EAAC,SAAS;UAACC,CAAC,EAAEH;QAAQ,GAA3C,GAAEF,CAAE,IAAGC,CAAE,EAAC;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAoC,CAC3D;MACH;IACF;IACA,OAAOV,QAAQ;EACjB;EAEA,oBACElB,OAAA;IACE6B,OAAO,EAAG,OAAMxB,WAAW,GAAGF,OAAO,GAAG,GAAI,IAC1CE,WAAW,GAAGF,OAAO,GAAGS,IAAI,CAACC,IAAI,CAAC,CAAC,CACpC,EAAE;IAAAiB,QAAA,EAEFb,gBAAgB;EAAE;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACf;AAEV;AAAC1B,EAAA,CA3CQD,WAAW;AAAA8B,EAAA,GAAX9B,WAAW;AA6CpB,eAAeA,WAAW;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}