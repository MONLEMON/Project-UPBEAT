{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\copte\\\\Desktop\\\\upbeatreact\\\\src\\\\HexagonGrid.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  hexagon: {\n    fill: \"#ffffff\",\n    stroke: \"#000000\",\n    strokeWidth: \"1px\"\n  }\n}));\nconst generateHexagonPath = (x, y, size) => {\n  const height = Math.sqrt(3) * size;\n  const width = 2 * size;\n  const halfHeight = height / 2;\n  const halfWidth = width / 2;\n  return `M ${x} ${y + halfHeight}\n          l ${halfWidth} ${-halfHeight}\n          l ${halfWidth} ${halfHeight}\n          l ${-halfWidth} ${halfHeight}\n          l ${-halfWidth} ${-halfHeight}\n          l ${halfWidth} ${-halfHeight}\n          z`;\n};\nfunction HexagonGrid(_ref) {\n  _s();\n  let {\n    width,\n    height,\n    size\n  } = _ref;\n  const classes = useStyles();\n  const hexagons = [];\n  const numRows = Math.floor(height / (Math.sqrt(3) * size)) + 1;\n  const numCols = Math.floor(width / (2 * size)) + 1;\n  for (let i = 0; i < numRows; i++) {\n    const offset = i % 2 === 0 ? size : 0;\n    for (let j = 0; j < numCols; j++) {\n      const x = j * 2 * size + offset;\n      const y = i * Math.sqrt(3) * size;\n      hexagons.push( /*#__PURE__*/_jsxDEV(\"path\", {\n        className: classes.hexagon,\n        d: generateHexagonPath(x, y, size)\n      }, `${i}-${j}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this));\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    viewBox: `0 0 ${width} ${height}`,\n    children: hexagons\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 10\n  }, this);\n}\n_s(HexagonGrid, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n_c = HexagonGrid;\nexport default HexagonGrid;\nvar _c;\n$RefreshReg$(_c, \"HexagonGrid\");","map":{"version":3,"names":["React","makeStyles","jsxDEV","_jsxDEV","useStyles","theme","hexagon","fill","stroke","strokeWidth","generateHexagonPath","x","y","size","height","Math","sqrt","width","halfHeight","halfWidth","HexagonGrid","_ref","_s","classes","hexagons","numRows","floor","numCols","i","offset","j","push","className","d","fileName","_jsxFileName","lineNumber","columnNumber","viewBox","children","_c","$RefreshReg$"],"sources":["C:/Users/copte/Desktop/upbeatreact/src/HexagonGrid.js"],"sourcesContent":["import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  hexagon: {\r\n    fill: \"#ffffff\",\r\n    stroke: \"#000000\",\r\n    strokeWidth: \"1px\",\r\n  },\r\n}));\r\n\r\nconst generateHexagonPath = (x, y, size) => {\r\n  const height = Math.sqrt(3) * size;\r\n  const width = 2 * size;\r\n  const halfHeight = height / 2;\r\n  const halfWidth = width / 2;\r\n  return `M ${x} ${y + halfHeight}\r\n          l ${halfWidth} ${-halfHeight}\r\n          l ${halfWidth} ${halfHeight}\r\n          l ${-halfWidth} ${halfHeight}\r\n          l ${-halfWidth} ${-halfHeight}\r\n          l ${halfWidth} ${-halfHeight}\r\n          z`;\r\n};\r\n\r\nfunction HexagonGrid({ width, height, size }) {\r\n  const classes = useStyles();\r\n\r\n  const hexagons = [];\r\n  const numRows = Math.floor(height / (Math.sqrt(3) * size)) + 1;\r\n  const numCols = Math.floor(width / (2 * size)) + 1;\r\n\r\n  for (let i = 0; i < numRows; i++) {\r\n    const offset = i % 2 === 0 ? size : 0;\r\n    for (let j = 0; j < numCols; j++) {\r\n      const x = j * 2 * size + offset;\r\n      const y = i * Math.sqrt(3) * size;\r\n      hexagons.push(\r\n        <path\r\n          key={`${i}-${j}`}\r\n          className={classes.hexagon}\r\n          d={generateHexagonPath(x, y, size)}\r\n        />\r\n      );\r\n    }\r\n  }\r\n\r\n  return <svg viewBox={`0 0 ${width} ${height}`}>{hexagons}</svg>;\r\n}\r\n\r\nexport default HexagonGrid;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,UAAU,QAAQ,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtD,MAAMC,SAAS,GAAGH,UAAU,CAAEI,KAAK,KAAM;EACvCC,OAAO,EAAE;IACPC,IAAI,EAAE,SAAS;IACfC,MAAM,EAAE,SAAS;IACjBC,WAAW,EAAE;EACf;AACF,CAAC,CAAC,CAAC;AAEH,MAAMC,mBAAmB,GAAGA,CAACC,CAAC,EAAEC,CAAC,EAAEC,IAAI,KAAK;EAC1C,MAAMC,MAAM,GAAGC,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC,GAAGH,IAAI;EAClC,MAAMI,KAAK,GAAG,CAAC,GAAGJ,IAAI;EACtB,MAAMK,UAAU,GAAGJ,MAAM,GAAG,CAAC;EAC7B,MAAMK,SAAS,GAAGF,KAAK,GAAG,CAAC;EAC3B,OAAQ,KAAIN,CAAE,IAAGC,CAAC,GAAGM,UAAW;AAClC,cAAcC,SAAU,IAAG,CAACD,UAAW;AACvC,cAAcC,SAAU,IAAGD,UAAW;AACtC,cAAc,CAACC,SAAU,IAAGD,UAAW;AACvC,cAAc,CAACC,SAAU,IAAG,CAACD,UAAW;AACxC,cAAcC,SAAU,IAAG,CAACD,UAAW;AACvC,YAAY;AACZ,CAAC;AAED,SAASE,WAAWA,CAAAC,IAAA,EAA0B;EAAAC,EAAA;EAAA,IAAzB;IAAEL,KAAK;IAAEH,MAAM;IAAED;EAAK,CAAC,GAAAQ,IAAA;EAC1C,MAAME,OAAO,GAAGnB,SAAS,EAAE;EAE3B,MAAMoB,QAAQ,GAAG,EAAE;EACnB,MAAMC,OAAO,GAAGV,IAAI,CAACW,KAAK,CAACZ,MAAM,IAAIC,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC,GAAGH,IAAI,CAAC,CAAC,GAAG,CAAC;EAC9D,MAAMc,OAAO,GAAGZ,IAAI,CAACW,KAAK,CAACT,KAAK,IAAI,CAAC,GAAGJ,IAAI,CAAC,CAAC,GAAG,CAAC;EAElD,KAAK,IAAIe,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,OAAO,EAAEG,CAAC,EAAE,EAAE;IAChC,MAAMC,MAAM,GAAGD,CAAC,GAAG,CAAC,KAAK,CAAC,GAAGf,IAAI,GAAG,CAAC;IACrC,KAAK,IAAIiB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,OAAO,EAAEG,CAAC,EAAE,EAAE;MAChC,MAAMnB,CAAC,GAAGmB,CAAC,GAAG,CAAC,GAAGjB,IAAI,GAAGgB,MAAM;MAC/B,MAAMjB,CAAC,GAAGgB,CAAC,GAAGb,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC,GAAGH,IAAI;MACjCW,QAAQ,CAACO,IAAI,eACX5B,OAAA;QAEE6B,SAAS,EAAET,OAAO,CAACjB,OAAQ;QAC3B2B,CAAC,EAAEvB,mBAAmB,CAACC,CAAC,EAAEC,CAAC,EAAEC,IAAI;MAAE,GAF7B,GAAEe,CAAE,IAAGE,CAAE,EAAC;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAGhB,CACH;IACH;EACF;EAEA,oBAAOlC,OAAA;IAAKmC,OAAO,EAAG,OAAMrB,KAAM,IAAGH,MAAO,EAAE;IAAAyB,QAAA,EAAEf;EAAQ;IAAAU,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAO;AACjE;AAACf,EAAA,CAvBQF,WAAW;EAAA,QACFhB,SAAS;AAAA;AAAAoC,EAAA,GADlBpB,WAAW;AAyBpB,eAAeA,WAAW;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}